/**
 * Created by Vipul Kumar on 01/15/2018.
 * Script for uploading libraries to Nexus repository
 * Simply applyFrom() this file and it will generate a gradle task 'publish'
 * */

def isReleaseBuild() {
    return !NEXUS_VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? NEXUS_RELEASE_REPOSITORY_URL
            : "http://nexus.bsbportal.com/nexus/content/repositories/releases/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? NEXUS_SNAPSHOT_REPOSITORY_URL
            : "http://nexus.bsbportal.com/nexus/content/repositories/releases/"
}

def getGroupName() {
    return hasProperty('NEXUS_GROUP') ? NEXUS_GROUP : "tv.airtel"
}

def getVersionName() {
    return hasProperty('NEXUS_VERSION_NAME') ? NEXUS_VERSION_NAME : "100.0"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

// Returns if the project is a java module (not Android library)
def isJavaLibrary() {
    return project.plugins.findPlugin("java") != null
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            if (isJavaLibrary()) {
                mavenJava(MavenPublication) {
                    from components.java
                    groupId getGroupName()
                    artifactId project.name
                    version getVersionName()
                }
            } else {
                android.libraryVariants.all { variant ->
                    "maven${variant.name.capitalize()}Aar"(MavenPublication) {
                        from components.findByName("android${variant.name.capitalize()}")
                        artifact androidSourcesJar
                        groupId getGroupName()
                        artifactId project.name
                        version getVersionName()
                    }
                }
            }
        }
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
                url getReleaseRepositoryUrl()
            }

        }
    }
}
